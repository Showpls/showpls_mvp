worker_processes auto;
events {
    worker_connections 1024;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    upstream backend {
        server app:5000;
    }

    # HTTP: serve ACME challenges & redirect everything else to HTTPS
    server {
        listen 80;
        server_name showpls.io app.showpls.io api.showpls.io;
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS for showpls.io - redirect to app.showpls.io
    server {
        listen 443 ssl;
        http2 on;
        server_name showpls.io;
        
        ssl_certificate /etc/letsencrypt/live/showpls.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/showpls.io/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=31536000" always;
        
        # Redirect everything to app.showpls.io
        location / {
            return 301 https://app.showpls.io$request_uri;
        }
    }

    # HTTPS for app.showpls.io and api.showpls.io
    server {
        listen 443 ssl;
        http2 on;
        server_name app.showpls.io api.showpls.io;
        
        ssl_certificate /etc/letsencrypt/live/app.showpls.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/app.showpls.io/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=31536000" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Allow Telegram webview to embed the app
        add_header Content-Security-Policy "frame-ancestors 'self' https://*.telegram.org https://web.telegram.org https://*.t.me" always;

        # Static assets and frontend routes - proxy to app
        location /assets/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # WebSocket proxy
        location /ws {
            proxy_pass http://backend/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400s;
        }

        # Telegram webhook proxy
        location ^~ /telegram/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Telegram-Bot-Api-Secret-Token $http_x_telegram_bot_api_secret_token;
        }

        # API proxy
        location /api/ {
            proxy_pass http://backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # SPA fallback - proxy to app
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Block source files
        location ~* \.(tsx|ts|jsx|map)$ {
            return 404;
        }
    }
}